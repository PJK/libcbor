version: 2.1

commands:
  linux-setup:
    steps:
    - run: sudo apt-get update
    - run: sudo apt-get install -y cmake "${TOOLCHAIN_PACKAGE}"
    - run: sudo apt install libcmocka-dev
  build-test:
    steps:
    - run: >
        cmake -DWITH_TESTS=ON \
          -DCBOR_CUSTOM_ALLOC=ON \
          -DCMAKE_BUILD_TYPE=Debug \
          -DSANITIZE=OFF \
          -DCOVERAGE="${CMAKE_COVERAGE:='OFF'}" \
          .
    - run: make VERBOSE=1
    - run: ctest -VV

orbs:
  codecov: codecov/codecov@3.2.2
jobs:
  static-test:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      TOOLCHAIN_PACKAGE: g++
    steps:
      - checkout
      - linux-setup
      # TODO update clang-format version
      # Use a pinned clang-format version to avoid inconsistencies
      - run: sudo apt-get install -y clang-format-8 doxygen cppcheck
      - run: cppcheck . --error-exitcode=1
      - run: bash clang-format.sh --verbose
      - run: >
          if ! $(git diff-index --quiet HEAD); then
            echo "Code formatting doesn't conform to clang-format"
            echo "Please run clang-format.sh, commit the diff, and push to re-run CI"
            echo "Excerpt of the diff follows"
            git diff | head -n 20
          fi
      - run: >
          cd doc &&
          pip3 install -r source/requirements.txt &&
          make html

  build-and-test:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      TOOLCHAIN_PACKAGE: g++
      CMAKE_COVERAGE: ON
    steps:
      - checkout
      - linux-setup
      - linux-setup
      - run: ctest -T Coverage
      - codecov/upload
        # TODO: Reenable, currently fails on libjson leak (package out of date)
        # The issue actually seems to be in the instrumentation code, not
        # libcbor (we don't use libjsoncpp)
        # https://github.com/open-source-parsers/jsoncpp/issues/507
      #      - run: >
      #          ctest --output-on-failure -T memcheck | tee memcheck.out
      #          if grep -q 'Memory Leak\|IPW\|Uninitialized Memory Conditional\|Uninitialized Memory Read' memcheck.out; then
      #            exit 1
      #          fi;

  build-and-test-clang:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      TOOLCHAIN_PACKAGE: clang
      CC: clang
      CXX: clang++
    steps:
      - checkout
      - linux-setup
      - build-test

  build-and-test-arm:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      TOOLCHAIN_PACKAGE: g++
    resource_class: arm.medium
    steps:
      - checkout
      - linux-setup
      - build-test

  build-bazel:
    machine:
      image: ubuntu-2004:202101-01
    environment:
      TOOLCHAIN_PACKAGE: g++
    steps:
      - checkout
      - linux-setup
      - run: sudo apt install apt-transport-https curl gnupg
      - run: curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
      - run: sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
      - run: echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
      - run: sudo apt update && sudo apt install bazel
      - run: bazel --version
      - run: >
          pushd examples/bazel &&
          bazel run -s src:hello

  build-and-test-osx:
    macos:
      xcode: 12.5.1
    steps:
      - checkout
      - run: bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      - run: brew install cmocka cmake
      - build-test

workflows:
  build-and-test:
    jobs:
      - static-test
      - build-and-test
      - build-and-test-clang
      - build-and-test-arm
      - build-and-test-osx:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - master
      - build-bazel